async function handleDelete(context) { const { request, env, data, params } = context; const { userId } = data; const itemId = params.id; if (!itemId) return new Response(JSON.stringify({ error: 'Item ID is missing' }), { status: 400 }); const checkOwnerQuery = `SELECT id FROM debt_items WHERE id = ? AND debtor_id IN (SELECT id FROM debtors WHERE user_id = ?);`; const item = await env.DB.prepare(checkOwnerQuery).bind(itemId, userId).first(); if (!item) { return new Response(JSON.stringify({ error: 'Item not found or you do not have permission to delete it.' }), { status: 404 }); } const allocationsQuery = `SELECT payment_id, amount_allocated FROM payment_allocations WHERE debt_item_id = ?`; const allocations = await env.DB.prepare(allocationsQuery).bind(itemId).all(); const batch = []; for (const alloc of allocations.results) { const otherAllocsQuery = `SELECT COUNT(*) as count FROM payment_allocations WHERE payment_id = ? AND debt_item_id != ?`; const { count } = await env.DB.prepare(otherAllocsQuery).bind(alloc.payment_id, itemId).first(); if (count === 0) { batch.push(env.DB.prepare('DELETE FROM payments WHERE id = ?').bind(alloc.payment_id)); } } batch.push(env.DB.prepare('DELETE FROM debt_items WHERE id = ?').bind(itemId)); await env.DB.batch(batch); return new Response(null, { status: 204 });}
export async function onRequest(context) { try { if (context.request.method === 'DELETE') { return await handleDelete(context); } return new Response('Method Not Allowed', { status: 405 }); } catch (error) { console.error('An error occurred in debt-items/[id].js:', error); return new Response(JSON.stringify({ error: 'Internal Server Error' }), { status: 500 });}}