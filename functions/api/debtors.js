// 【新文件】
async function handleGet({ env, data }) { /* ...省略，和之前版本一样... */ }
async function handlePost({ request, env, data }) { /* ...省略，和之前版本一样... */ }
// --- 完整代码 ---
async function handleGet({ env, data }) { const { userId } = data; const getDebtorsQuery = `SELECT d.id, d.name, d.contact_info, (COALESCE((SELECT SUM(di.total_amount) FROM debt_items di WHERE di.debtor_id = d.id), 0) - COALESCE((SELECT SUM(p.amount) FROM payments p WHERE p.debtor_id = d.id), 0)) AS total_unpaid_amount FROM debtors d WHERE d.user_id = ? GROUP BY d.id, d.name, d.contact_info ORDER BY d.name;`; const { results } = await env.DB.prepare(getDebtorsQuery).bind(userId).all(); return new Response(JSON.stringify(results), { headers: { 'Content-Type': 'application/json' } });}
async function handlePost({ request, env, data }) { const { userId } = data; const { name, contact_info } = await request.json(); if (!name) return new Response(JSON.stringify({ error: 'Debtor name is required' }), { status: 400 }); const debtorId = crypto.randomUUID(); const now = Date.now(); const addDebtorQuery = 'INSERT INTO debtors (id, user_id, name, contact_info, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)'; await env.DB.prepare(addDebtorQuery).bind(debtorId, userId, name, contact_info || null, now, now).run(); const newDebtor = { id: debtorId, name, contact_info: contact_info || null, total_unpaid_amount: 0 }; return new Response(JSON.stringify(newDebtor), { status: 201, headers: { 'Content-Type': 'application/json' } });}
export async function onRequest(context) { try { switch (context.request.method) { case 'GET': return await handleGet(context); case 'POST': return await handlePost(context); default: return new Response('Method Not Allowed', { status: 405 }); } } catch (error) { if (error.message?.includes('UNIQUE constraint failed')) { return new Response(JSON.stringify({ error: 'A debtor with this name already exists.' }), { status: 409 }); } console.error('An error occurred:', error); return new Response(JSON.stringify({ error: 'Internal Server Error' }), { status: 500 });}}