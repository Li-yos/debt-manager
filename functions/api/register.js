async function hashPassword(password) { const encoder = new TextEncoder(); const data = encoder.encode(password); const hashBuffer = await crypto.subtle.digest('SHA-256', data); const hashArray = Array.from(new Uint8Array(hashBuffer)); return btoa(String.fromCharCode.apply(null, hashArray)); }
export async function onRequestPost({ request, env }) { try { const { username, password } = await request.json(); if (!username || !password) { return new Response(JSON.stringify({ error: 'Username and password are required' }), { status: 400, headers: { 'Content-Type': 'application/json' } }); } const checkUserSql = 'SELECT id FROM users WHERE username = ?'; const existingUser = await env.DB.prepare(checkUserSql).bind(username).first(); if (existingUser) { return new Response(JSON.stringify({ error: 'Username already exists' }), { status: 409, headers: { 'Content-Type': 'application/json' } }); } const hashedPassword = await hashPassword(password); const userId = crypto.randomUUID(); const createdAt = Date.now(); const insertUserSql = 'INSERT INTO users (id, username, hashed_password, created_at) VALUES (?, ?, ?, ?)'; await env.DB.prepare(insertUserSql).bind(userId, username, hashedPassword, createdAt).run(); return new Response(JSON.stringify({ message: 'User registered successfully' }), { status: 201, headers: { 'Content-Type': 'application/json' } }); } catch (error) { console.error('Registration Error:', error); return new Response(JSON.stringify({ error: 'An internal server error occurred.' }), { status: 500, headers: { 'Content-Type': 'application/json' } }); } }