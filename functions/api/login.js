async function hashPassword(password) { const encoder = new TextEncoder(); const data = encoder.encode(password); const hashBuffer = await crypto.subtle.digest('SHA-256', data); const hashArray = Array.from(new Uint8Array(hashBuffer)); return btoa(String.fromCharCode.apply(null, hashArray));}
export async function onRequestPost({ request, env }) { try { const { username, password } = await request.json(); if (!username || !password) { return new Response(JSON.stringify({ error: 'Username and password are required' }), { status: 400, headers: { 'Content-Type': 'application/json' } }); } const userQuery = 'SELECT id, hashed_password FROM users WHERE username = ?'; const user = await env.DB.prepare(userQuery).bind(username).first(); if (!user) { return new Response(JSON.stringify({ error: 'Invalid username or password' }), { status: 401, headers: { 'Content-Type': 'application/json' } }); } const inputHashedPassword = await hashPassword(password); if (inputHashedPassword !== user.hashed_password) { return new Response(JSON.stringify({ error: 'Invalid username or password' }), { status: 401, headers: { 'Content-Type': 'application/json' } }); } const token = crypto.randomUUID(); const userId = user.id; const expiresAt = Date.now() + 7 * 24 * 60 * 60 * 1000; const sessionInsert = 'INSERT INTO sessions (token, user_id, expires_at) VALUES (?, ?, ?)'; await env.DB.prepare(sessionInsert).bind(token, userId, expiresAt).run(); return new Response(JSON.stringify({ message: 'Login successful', token: token, user: { id: userId, username: username } }), { status: 200, headers: { 'Content-Type': 'application/json' } }); } catch (error) { console.error('Login Error:', error); return new Response(JSON.stringify({ error: 'An internal server error occurred.' }), { status: 500, headers: { 'Content-Type': 'application/json' } }); } }